c
:inventory_id
"/api/v1/inventories/:inventory_id/items/#{item.id}"
"/api/v1/inventories/:inventory_id/items/#{item.id}",
c
response
c
have_http_status(204)
response
c
expect(response.body).to include("has already been taken")
expect(ValidatingWidget.new.errors_on(:category_name)).to include("has already been taken")
response.message['category_name']
response.message
JSON.parse(response.body)['description']
response.body
response.body)
eq(my_inventory.category_name)
JSON.parse(response.body)["category_name"]
c
response.buf[message]
response.buf
response.status
 have_http_status(:unprocessable_entity)
response
c
have_http_status(:created)
response.status
response
response.body
JSON.parse(response.body)
c
response
c
JSON.parse(response.body)["category_name"]
response.body
c
JSON.parse(response.body)["category_name"]
(JSON.parse(response.body)["category_name"]
response.body
c
response.body
JSON.parse(response.body)["category_name"]
c
response.body
JSON.parse(response.body)
c
   39:         } }
   38:           description: my_inventory.description
   37:           category_name: my_inventory.category_name,
   36:         { inventory: {
 post :create, params:
response.body
c
response.body
c
response.body
c
json_body["my_inventory"]["category_name"]
json_body["inventory"]["category_name"]
json_body["category_name"]
response.body
c
response.body
c
response.body
c
response.body
c
response.body
c
response.body
 expect(JSON['category_name']).to eq(my_inventory.category_name)
 expect(json['category_name']).to eq(my_inventory.category_name)
c
JSON['category_name']
it 'returns the category_name' do
json['category_name']
c
JSON['category_name']
   35:       end
   34:         expect(JSON['category_name']).to eq(inventory.category_name)
it 'returns the category_name' do
 it 'returns the category_name' do
inventory.category_name
c
params[:inventory_id]
params[inventory_id]
params
c
params
c
params
c
@item.update(quantity: invoice_quantity)
@invoice.destroy
invoice_quantity
invoice_quantity = @item.quantity.to_i+@invoice.quantity.to_i
@item = Item.find(params[:item_id])
@invoice = Invoice.find(params[:id])
params[:item_id]
params
c
params[:inventory_id]
params
c
params
c
params[:item_id]
params
c
current_user.id
current_user
currunt_user
params
c
exit
cexit
c
can? :manage, inventory
inventory
@inventory
can?
can? :manage, @inventory
can? :update, @inventory
c
user.has_role? "admin"
c
user.has_role? "admin"
user.has_role? admin
user.has_role?
user.roles
user.roles.name
user.roles
user.role
user
c
can :read, Inventory
user.admin?
return unless user.admin?
can :read, Inventory, user: user
return unless user.present?
can :read, Inventory, public: true
c
params
params[:id]
c
redirect_to @inventory
@inventory.save
 @inventory = Inventory.new(inventory_params)
inventory_params
c
params
:id
params[:id]
c
params[:id] != true
params[:id] = true
c
item = Item.find(params[:id])
@my_items = []
c
 @invoice = costomer.invoices.create(quantity: params[:invoice][:quantity],total_price: total_price, item_id: params[:item_id])
 costomer = Costomer.find(1)
 @invoice = costomer.invoices.create(quantity: params[:invoice][:quantity],total_price: total_price, item_id: params[:item_id])
total_price = item.price*quantity.to_i
total_price = item.price*quantity
quantity = params[:invoice][:quantity]
 item = Item.find(params[:item_id])
   21:     item = Item.find(params[:item_id])
item.price*quantity
item 
params[:invoice][:quantity]
quantity
Item.find(params[:item_id])
item 
c
quantity: params[:invoice][:quantity],total_price: params[:invoice][:total_price] ,item_id: params[:item_id]
params[:item_id]
params[:invoice][:total_price]
params[:invoice][:quantity]
costomer.invoices.create(quantity: params[:invoice][:quantity],total_price: params[:invoice][:total_price] ,item_id: params[:item_id]
@invoice
c
params[:invoice][:quantity]
params[:item_id]
params[:quantity]
params
params[quantity]
params[
params[1]
params
invoice_params,item_id: = params[:item_id]
invoice_params,item_id:= params[:item_id]
invoice_params,item_id: params[:item_id]
c
invoice_params
invoice_params,costomer_id: 1
params[:item_id]
c
invoice_params
params
invoice_params
c
 @item = Item.find(params[:id])
c
redirect_to("/inventorys/#{inventory.id}/items/#{item.id}")
eq(200)
c
response.status
response
 expect(response.status).to be_successful
c
params: {inventory_id: inventory.id, item: {}}
inventory = Inventory.create(item_name: 'inventory_first')
params: {inventory_id: inventory.id, item: {}}
c
params: { id: item.id }
get :show, params: { id: item.id }
expect(response).to redirect_to("/inventorys/#{inventory.id}/items/#{item.id}")
c
params: { id: item.id.to_S }
params[id: item.id.to_S]
params
params[:id]
params[id: item.id]
params[id:]
params: { id: item.id }
item = Item.create(name: "Somename", price: 10, rating: "4",inventory_id: inventory.id)
inventory = Inventory.create(item_name: 'inventory_first')
c
get :show, params: {item: {} , id: item.id}
get :show, params: { id: inventory.id, id: item.id}
get :show, params: { id: inventory.id,item: {} , id: item.id}
get :show, params: { id: inventory.id,item: {} }
get :show, params: { id: item.id }
item = Item.create(name: "Somename", price: 10, rating: "4",inventory_id: inventory.id)
inventory = Inventory.create(item_name: 'inventory_first')
c
get "/inventorys/#{inventory.id}/items"
get '/inventorys/#{inventory.id}/items'
get :index, inventory_id: inventory.id
get :index, inventory_id: inventory
get :index, {"inventory_id", inventory}
get :index, {"inventory_id", inventory.id}
get :index, {inventory_id: inventory.id}
get :index, inventory_id: inventory.id
get :index, { inventory_id: inventory.id }
get :index { inventory_id: inventory.id }
get :index, { inventory_id: inventory.id }
get inventory::index
get inventory: :index
get :index
get :index, inventory_id: inventory.id
inventory = Inventory.create(item_name: 'inventory_first')
c
